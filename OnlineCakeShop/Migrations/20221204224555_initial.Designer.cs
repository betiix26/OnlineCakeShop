// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineCakeShop.Models;

#nullable disable

namespace OnlineCakeShop.Migrations
{
    [DbContext(typeof(CakeContext))]
    [Migration("20221204224555_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OnlineCakeShop.Models.Cake", b =>
                {
                    b.Property<int>("CakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CakeId"));

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("CakeId");

                    b.HasIndex("CartId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Cakes");
                });

            modelBuilder.Entity("OnlineCakeShop.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.HasKey("CartId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("OnlineCakeShop.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("OnlineCakeShop.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactMessage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("OnlineCakeShop.Models.CustomCake", b =>
                {
                    b.Property<int>("CustomCakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomCakeId"));

                    b.Property<bool>("Apples")
                        .HasColumnType("bit");

                    b.Property<bool>("Cherry")
                        .HasColumnType("bit");

                    b.Property<bool>("Chocolate")
                        .HasColumnType("bit");

                    b.Property<bool>("Coconut")
                        .HasColumnType("bit");

                    b.Property<bool>("Cookies")
                        .HasColumnType("bit");

                    b.Property<bool>("Peanuts")
                        .HasColumnType("bit");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<bool>("Raspberries")
                        .HasColumnType("bit");

                    b.Property<bool>("Snickers")
                        .HasColumnType("bit");

                    b.Property<bool>("Strawberries")
                        .HasColumnType("bit");

                    b.Property<bool>("Vanilla")
                        .HasColumnType("bit");

                    b.Property<bool>("WhippedCream")
                        .HasColumnType("bit");

                    b.HasKey("CustomCakeId");

                    b.ToTable("CustomCakes");
                });

            modelBuilder.Entity("OnlineCakeShop.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnlineCakeShop.Models.Quantity", b =>
                {
                    b.Property<int>("QuantityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuantityId"));

                    b.Property<int?>("CakeId")
                        .HasColumnType("int");

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomCakeId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.HasKey("QuantityId");

                    b.HasIndex("CakeId");

                    b.HasIndex("CartId");

                    b.HasIndex("CustomCakeId");

                    b.HasIndex("OrderId");

                    b.ToTable("Quantities");
                });

            modelBuilder.Entity("OnlineCakeShop.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int?>("CakeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReviewId");

                    b.HasIndex("CakeId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("OnlineCakeShop.Models.Cake", b =>
                {
                    b.HasOne("OnlineCakeShop.Models.Cart", null)
                        .WithMany("Cakes")
                        .HasForeignKey("CartId");

                    b.HasOne("OnlineCakeShop.Models.Category", "Category")
                        .WithMany("Cakes")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("OnlineCakeShop.Models.Quantity", b =>
                {
                    b.HasOne("OnlineCakeShop.Models.Cake", "Cake")
                        .WithMany()
                        .HasForeignKey("CakeId");

                    b.HasOne("OnlineCakeShop.Models.Cart", null)
                        .WithMany("Quantities")
                        .HasForeignKey("CartId");

                    b.HasOne("OnlineCakeShop.Models.CustomCake", "CustomCake")
                        .WithMany()
                        .HasForeignKey("CustomCakeId");

                    b.HasOne("OnlineCakeShop.Models.Order", null)
                        .WithMany("Quantities")
                        .HasForeignKey("OrderId");

                    b.Navigation("Cake");

                    b.Navigation("CustomCake");
                });

            modelBuilder.Entity("OnlineCakeShop.Models.Review", b =>
                {
                    b.HasOne("OnlineCakeShop.Models.Cake", "Cake")
                        .WithMany()
                        .HasForeignKey("CakeId");

                    b.Navigation("Cake");
                });

            modelBuilder.Entity("OnlineCakeShop.Models.Cart", b =>
                {
                    b.Navigation("Cakes");

                    b.Navigation("Quantities");
                });

            modelBuilder.Entity("OnlineCakeShop.Models.Category", b =>
                {
                    b.Navigation("Cakes");
                });

            modelBuilder.Entity("OnlineCakeShop.Models.Order", b =>
                {
                    b.Navigation("Quantities");
                });
#pragma warning restore 612, 618
        }
    }
}
